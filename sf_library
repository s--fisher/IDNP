/* # DESIGNING A NEW OPERATING SYSTEM WAS AND WILL ALWAYS BE ONE OF THE GREATEST JOYS OF MY LIFE # */
/* # for me trundle means keep turning. . .  rock and roll# */
/*
 * PROTOTYPES
 *
*/
/*
double sf_Rnd();
int sf_getSize();
int sf_Str_toNum();
size_t sf_Length();
void sf_Print();
void sf_Fill();
int sf_isPrint();
int sf_isNum();
int sf_Pow();
int sf_strToInt();
float sf_strToFloat();
int sf_isLowerCase();
int sf_isUpperCase();
int sf_isLetter();
void sf_mkUcase();
void sf_mkLcase();
*/
//attribution https://www.geeksforgeeks.org/generating-random-number-range-c/
double sf_Rnd(int lower, int upper){	
//	srand(time(0));
	if((lower == 0) && (upper == 1))//special case, decimals 0 to 1
		return ((double)rand() / (double)RAND_MAX);
	if((lower == 0) && (upper == -1))//special case, exclude 1.0
		return ((double)rand() / ((double)RAND_MAX + 1));
	return (((rand() % (upper - lower + 1)) + lower));//integer range
}

int sf_getSize(char ch[]){
	int r = 0;
	int i =0;

	while(ch[i] != 0x00){
		if(ch[i] == '\n')
			r++;
		i++;
	}

	return r;
}

size_t sf_Length(char str[]){
	size_t len = 0;
	while(str[len] != 0){
		len++;		
	}
	return len;
}

int sf_isPrint(char str){
	int r = -1;
	if(str > 0x1F && str < 0x7F){
		r++;
	}	
		r++;
	return r;
}

int sf_isNum(char str){
	int r = -1;
	if( sf_isPrint(str) == 1 ){
		if( (str > 0x2F) && (str < 0x3A) ){
			r++;
		}
	}
		r++;	
	return r;
}

int sf_Pow(size_t b, size_t p){
	int r;
	int i;
	if( p < 0){//create negitive case
		
	}
	if( p == 0){
		r = 1;
	}
	if( p > 0){
		r = 1;
		i = p;
		while(i > 0){
			r = ( b * r );
			i--;
		}	
	}
	return r;
}

int sf_Str_toNum(char str[]){
        int x;
        int i;
        int r = 0x00;
        int p = 0;
        int a = 0;
        size_t len = 0;
        len = sf_Length(str);
        x = len;
        int y = 0;
        char X[len];

        for(i = 0; i < x; i++){
                if(sf_isNum(str[i])){
                        X[i] = str[len - i - 1];
                        r = X[i];
                        y = r - 48;
                        p =  sf_Pow(10, i);
                        a += (p*y);
                }
        }
    return a;
}

void sf_Print(char str[]){
	size_t len = sf_Length(str);

	for(int x = 0; x < len; x++){
		printf("%c",str[x]);
	}
	return;
}

void sf_Fill(char str[], size_t len){
	char X[len];
	int x = -1;
	for(x = 0; x < len; x++){
		X[x] = str[x];		
	}
	while( x > 0){
		printf("%c\n",X[len-x]);
	}
	return;
}

int sf_strToInt(char str[]) {
	int x;
	int i;
	int r = 0x00;
	int p = 0;
	int a = 0;
	size_t len = 0;
	len = sf_Length(str);	
	x = len;
	int y = 0;	
	char X[len];
	X[len] = 0x00;	
	for(i = 0; i < x; i++){	
		if(sf_isNum(str[i])){
			X[i] = str[len - i - 1];
			r = X[i];
			y = r - 48;
			p =  sf_Pow(10, i);
			a += (p*y);	
		}
	}
    return a;
}

float sf_strToFloat(char str[]) {
	float r = 0.0;
   	size_t len = sf_Length(str);
	int x = len;
	int s = 0;
	char X[len];
	int p = 0;
	int RsLen = 0; //right side length
	int LsLen = 0; //left side length

	for(int i = 0; i < x; i++){
		if((str[i] != '.') && (s < 1)){
			X[i] = str[i];
			LsLen++;	
		}else{
			s++;
		}
	}
	X[LsLen + 1] = 0;	
	char Y[LsLen];
	
	for(int i = 0; i < LsLen; i++){
		Y[i] = X[i];
	}
	Y[LsLen] = 0x00;

	RsLen = x - LsLen - 1; //Right side Length
	char Z[RsLen];
	for(int i = 0; i < RsLen; i++){
		if((str[i + LsLen + 1] != '.') && (p < 1)){
			Z[i] = str[i + LsLen + 1];
		}else{
			p++;
		}

	}
	Z[RsLen] = 0x00;

	r = sf_strToInt(Z);
       
	while( RsLen > 0){
		r /= 10;	
		RsLen--;
	}

	r += sf_strToInt(Y);
	return r;
}

int sf_isLowerCase(char str){
	int r = -1;
	if(sf_isPrint(str) == 1){	
		if(str > 0x60 && str < 0x7B){
			r++;
		}
	}
		r++;
	return r;
}


int sf_isUpperCase(char str){
	int r = -1;
	if(sf_isPrint(str) == 1){	
		if(( str > 0x40) && (str < 0x5B) ){
			r++;
		}
		r++;
	}
	return r;
}

int sf_isLetter(char str){
	int r = -1;
	if(sf_isPrint(str) == 1){	
		if(sf_isLowerCase(str) == 1 || sf_isUpperCase(str) == 1){
			r++;
		}
	}
		r++;
	return r;
}

void sf_mkUcase(char str){
	if(sf_isUpperCase(str) == 0){;
		str -= 0x20;
		printf("%c", str);
	}
	return;
}

void sf_mkLcase(char str){
	if(sf_isUpperCase(str) == 1){
		str += 0x20;
		printf("%c", str);
	}
	return;
}
